/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package me.toomuchzelda.sndminestom;

import me.toomuchzelda.sndminestom.core.CustomPlayer;
import me.toomuchzelda.sndminestom.core.commands.CommandStop;
import me.toomuchzelda.sndminestom.core.ranks.Rank;
import me.toomuchzelda.sndminestom.game.Game;
import me.toomuchzelda.sndminestom.game.teamarena.KingOfTheHill;
import me.toomuchzelda.sndminestom.game.teamarena.commands.CommandKit;
import me.toomuchzelda.sndminestom.game.teamarena.commands.CommandTeam;
import me.toomuchzelda.sndminestom.listeners.EventListeners;
import net.kyori.adventure.text.Component;
import net.minestom.server.MinecraftServer;
import net.minestom.server.command.CommandManager;
import net.minestom.server.coordinate.Pos;
import net.minestom.server.entity.Entity;
import net.minestom.server.entity.Player;
import net.minestom.server.entity.PlayerSkin;
import net.minestom.server.event.GlobalEventHandler;
import net.minestom.server.event.instance.InstanceTickEvent;
import net.minestom.server.event.player.PlayerLoginEvent;
import net.minestom.server.event.player.PlayerSkinInitEvent;
import net.minestom.server.event.player.PlayerSpawnEvent;
import net.minestom.server.extras.MojangAuth;
import net.minestom.server.instance.*;
import net.minestom.server.instance.batch.ChunkBatch;
import net.minestom.server.instance.block.Block;
import net.minestom.server.network.ConnectionManager;
import net.minestom.server.world.biomes.Biome;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Logger;

public class Main {
	
	private static final Logger logger = Logger.getLogger("SNDMinestom");
	private static EventListeners eventListeners;
	
	private static final ConcurrentHashMap<InstanceContainer, Game> gameInstances = new ConcurrentHashMap<>();
	
	public static void main(String[] args) {
		//System.setProperty("minestom.tps", "20");
		
		MinecraftServer mcServer = MinecraftServer.init();
		MojangAuth.init();
		
		//Create the first game
		InstanceManager instanceManager = MinecraftServer.getInstanceManager();
		InstanceContainer instance = instanceManager.createInstanceContainer();
		//instance.setChunkGenerator(new GeneratorDemo());
		Game firstGame = new KingOfTheHill(instance, "Official Lobby");
		gameInstances.put(instance, firstGame);
		
		
		ConnectionManager connectionManager = MinecraftServer.getConnectionManager();
		connectionManager.setPlayerProvider(CustomPlayer::new);
		
		GlobalEventHandler globalEventHandler = MinecraftServer.getGlobalEventHandler();
		globalEventHandler.addListener(PlayerLoginEvent.class, event -> {
			final Player player = event.getPlayer();
			event.setSpawningInstance(instance);
			player.setRespawnPoint(new Pos(0, 100, 0));
			if(player.getName().equals(Component.text("toomuchzelda"))) {
				((CustomPlayer) player).setRank(Rank.OPERATOR);
			}
		});
		
		globalEventHandler.addListener(PlayerSkinInitEvent.class, event -> {
			//PlayerSkin skin = PlayerSkin.fromUuid(event.getPlayer().getUuid().toString());
			PlayerSkin skin = PlayerSkin.fromUsername(event.getPlayer().getUsername());
			event.setSkin(skin);
		});
		
		globalEventHandler.addListener(PlayerSpawnEvent.class, event -> {
			//TextColor color = TextColor.color(MathUtils.randomMax(255), MathUtils.randomMax(255), MathUtils.randomMax(255));
			//event.getPlayer().setDisplayName(Component.text(event.getPlayer().getUsername()).color(color));
		});
		
		//Run the game ticks on every instance tick
		globalEventHandler.addListener(InstanceTickEvent.class, instanceTickEvent -> {
			
			Game game = gameInstances.get(instanceTickEvent.getInstance());
			//manually update hitbox size on players pose because minestom doesn't
			for(Player p : game.getPlayers()) {
				double width = p.getBoundingBox().getWidth();
				double length = p.getBoundingBox().getDepth();
				double height;
				
				switch(p.getPose()) {
					case FALL_FLYING -> height = 0.6;
					case SWIMMING, SPIN_ATTACK -> height = 0.625; //assumed spin attack is same as swimming
					case SNEAKING -> height = 1.5;
					default -> height = 1.8;
				}
				
				p.setBoundingBox(width, height, length);
			}
			
			game.tick();
		});
		
		registerCommands();
		
		eventListeners = new EventListeners();
		
		mcServer.start("0.0.0.0", 25565);
	}
	
	/*private static Game createGame(GameType gameType, InstanceContainer instance) {
		if(nextGameType == null) {
			int random = MathUtils.randomRange(0, 2);
			//nextGameType = GameType.values()[random];
			nextGameType = GameType.KOTH;
		}
		
		Game nextGame;
		if(nextGameType == GameType.KOTH)
			nextGame = new KingOfTheHill(instance);
		else if(nextGameType == GameType.CTF)
			nextGame = new CaptureTheFlag(instance);
		else
			nextGame = new SearchAndDestroy(instance); //else if SND
		
		nextGameType = null;
		return nextGame;
	}*/
	
	public static Logger getLogger() {
		return logger;
	}
	
	private static void registerCommands() {
		CommandManager manager = MinecraftServer.getCommandManager();
		manager.register(new CommandStop());
		manager.register(new CommandKit());
		manager.register(new CommandTeam());
	}
	
	public static Game getInstanceGame(Instance instance) {
		if(instance instanceof InstanceContainer instanceContainer) {
			return gameInstances.get(instanceContainer);
		}
		else
			return null;
	}
	
	//in case of emergency
	private static class GeneratorDemo implements ChunkGenerator
	{
		@Override
		public void generateChunkData(ChunkBatch batch, int chunkX, int chunkZ) {
			for(byte x = 0; x < Chunk.CHUNK_SIZE_X; x++) {
				for(byte z = 0; z < Chunk.CHUNK_SIZE_Z; z++) {
					for(byte y = 0; y < 40; y++) {
						batch.setBlock(x, y, z, Block.STONE);
					}
				}
			}
		}
		
		@Override
		public void fillBiomes(Biome[] biomes, int chunkX, int chunkZ) {
			Arrays.fill(biomes, Biome.PLAINS);
		}
		
		@Override
		public List<ChunkPopulator> getPopulators() {
			return null;
		}
	}
}
